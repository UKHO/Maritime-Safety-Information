name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
- name: ContinueEvenIfResourcesAreGettingDestroyed
  displayName: "Continue even if resources are getting destroyed"
  type: boolean
  default: false

trigger:
- main
- release/*

pool: 
  name: NautilusBuild
  demands: vs_16 -equals 1 #exclude agents 13 and 14 as code coverage report fails

variables:
- name: BuildConfiguration
  value: "release"
- name: BuildPlatform
  value: "any cpu"
- name: BuildCounter
  value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
- name: UKHOAssemblyCompany
  value: "UK Hydrographic Office"
- name: UKHOAssemblyVersionPrefix
  value: "1.0."
- name: UKHOAssemblyProduct
  value: "Maritime Safety Information"
- name: UKHOAssemblyCopyright
  value: "Copyright Â© UK Hydrographic Office"
- name: Container
  value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.9.6"
- name: DeploymentPool
  value: "Mare Nectaris"
- name: WindowsPool
  value: "NautilusBuild"
- name: DotNetSdkVersion
  value: "8.x"

resources:
  repositories:
  - repository: UKHOTemplates
    type: github
    name: UKHO/devops-pipelinetemplates
    endpoint: UKHO
    ref: refs/heads/main

stages:
- stage: BuildTestPublish
  displayName: Build, test and publish
  dependsOn: []
  jobs:
  - template: /Deployment/templates/build-test-publish.yml

- stage: DevDeploy
  displayName: Dev deploy
  dependsOn:
  - BuildTestPublish
  jobs:
  - template: /Deployment/templates/continuous-deployment.yml
    parameters:
      AzureDevOpsEnvironment: Maritime-Safety-Information-Dev
      ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
      Container: ${{ variables.Container }}
      ShortName: dev
      RunFunctionalTests: true






- stage: QADeploy
  displayName: "QAdeploy (inc terraform, webapp deploy)"
  variables:
    - group: "Maritime-Safety-Information-QA-TF-Variables"
    - group: "Maritime-Safety-Information-QA-Variables"
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  jobs:
    - deployment: QADeployTerraform
      displayName: "QA - Deploy Terraform and Dotnet App"
      environment: "Maritime-Safety-Information-QA"
      pool: $(DeploymentPool)
      container: ${{variables.Container}}
      workspace:
        clean: all
      strategy:
        runOnce:
          deploy:
            steps:
              - template: Deployment/templates/continuous-deployment.yml
                parameters:
                  ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                  AzureSubscription: "Maritime Safety Information QA - A.008.02"

              - task: AzureCLI@2
                displayName: "Set entity in table storage"
                inputs:
                  azureSubscription: "Maritime Safety Information QA - A.008.02"
                  scriptType: 'pscore'
                  scriptLocation: 'scriptPath'
                  scriptPath: '$(Pipeline.Workspace)/terraformartifact/SetEntityInTableStorage.ps1'
                  arguments: "-Storageaccountname $(storage_name) -Tablename $(table_storage_name)"

    - deployment: QADeployApp
      dependsOn: QADeployTerraform
      displayName: "QA - DACPAC and App Deployment"
      pool: NautilusBuild
      environment: "Maritime-Safety-Information-QA"
      workspace:
        clean: all
      variables:
        - name: WEB_APP_NAME
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.WEB_APP_NAME']  ]
        - name: ADMIN_WEB_APP_NAME
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.ADMIN_WEB_APP_NAME']  ]
        - name: MsiWafUrl
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.MsiWafUrl']  ]
        - name: Admin_DNS_URL
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.Admin_DNS_URL']  ]
        - name: WEB_APP_SLOT_NAME
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.WEB_APP_SLOT_NAME']  ]
        - name: WEB_ADMIN_APP_SLOT_NAME
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.WEB_ADMIN_APP_SLOT_NAME']  ]
        - name: WEB_APP_SLOT_HOST_NAME
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.WEB_APP_SLOT_HOST_NAME']  ]
        - name: WEB_ADMIN_APP_SLOT_HOST_NAME
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.WEB_ADMIN_APP_SLOT_HOST_NAME']  ]
        - name: webapp_rg
          value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.webapp_rg']  ]

      strategy:
        runOnce:
          deploy:
            steps:
              - template: Deployment/templates/continuous-dacpac-app-deployment.yml
                parameters:
                  AzureSubscription: "Maritime Safety Information QA - A.008.02"

    - job: FunctionalAndAccessibilityTests
      dependsOn:
      - QADeployTerraform
      - QADeployApp
      pool: $(WindowsPool)
      displayName: "QA Functional Automated And Accessibility Tests"
      variables:
        WEB_APP_NAME: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.WEB_APP_NAME']  ]        
        url: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.MsiWafUrl']  ]
        rnwAdminUrl: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.Admin_DNS_URL']  ]
        webapp_rg: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.webapp_rg']  ]
        PLAYWRIGHT_JUNIT_OUTPUT_NAME: results.xml
      workspace:
        clean: all
      steps:
        - template: Deployment/templates/continuous-testing.yml
          parameters:
            AzureSubscription: "Maritime Safety Information QA - A.008.02"
            UseFssMock: false

- stage: Livedeploy
  displayName: "Livedeploy (inc terraform, webapp deploy)"
  variables:
    - group: "Maritime-Safety-Information-Live-TF-Variables"
    - group: "Maritime-Safety-Information-Live-Variables"
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  jobs:
    - deployment: LiveDeployTerraform
      displayName: "Live - deploy terraform and dotnet App"
      environment: "Maritime-Safety-Information-Live"
      pool: $(DeploymentPool)
      container: ${{variables.Container}}
      workspace:
        clean: all
      strategy:
        runOnce:
          deploy:
            steps:
              - template: Deployment/templates/continuous-deployment.yml
                parameters:
                  ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                  AzureSubscription: "Maritime Safety Information Live - A.008.02"

              - task: AzureCLI@2
                displayName: "Set entity in table storage"
                inputs:
                  azureSubscription: "Maritime Safety Information Live - A.008.02"
                  scriptType: 'pscore'
                  scriptLocation: 'scriptPath'
                  scriptPath: '$(Pipeline.Workspace)/terraformartifact/SetEntityInTableStorage.ps1'
                  arguments: "-Storageaccountname $(storage_name) -Tablename $(table_storage_name)"

    - deployment: LiveDeployApp
      dependsOn: LiveDeployTerraform
      displayName: "Live - DACPAC and App Deployment"
      pool: NautilusBuild
      environment: "Maritime-Safety-Information-Live"
      workspace:
        clean: all
      variables:
        - name: WEB_APP_NAME
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.WEB_APP_NAME']  ]
        - name: ADMIN_WEB_APP_NAME
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.ADMIN_WEB_APP_NAME']  ]
        - name: MsiWafUrl
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.MsiWafUrl']  ]
        - name: Admin_DNS_URL
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.Admin_DNS_URL']  ]
        - name: WEB_APP_SLOT_NAME
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.WEB_APP_SLOT_NAME']  ]
        - name: WEB_ADMIN_APP_SLOT_NAME
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.WEB_ADMIN_APP_SLOT_NAME']  ]
        - name: WEB_APP_SLOT_HOST_NAME
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.WEB_APP_SLOT_HOST_NAME']  ]
        - name: WEB_ADMIN_APP_SLOT_HOST_NAME
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.WEB_ADMIN_APP_SLOT_HOST_NAME']  ]
        - name: webapp_rg
          value: $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.webapp_rg']  ]

      strategy:
        runOnce:
          deploy:
            steps:
              - template: Deployment/templates/continuous-dacpac-app-deployment.yml
                parameters:
                  AzureSubscription: "Maritime Safety Information Live - A.008.02"
  
    - job: PostDeploymentActions
      dependsOn:
      - LiveDeployApp                 
      pool: $(WindowsPool)        
      displayName: Post Deployment Actions
      steps:
        - template: Deployment/templates/retain-pipeline.yml
