name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

trigger:
  - main
  - release/*

pool: NautilusBuild

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: UKHOAssemblyCompany
    value: "UK Hydrographic Office"
  - name: UKHOAssemblyVersionPrefix
    value: "1.0."
  - name: UKHOAssemblyProduct
    value: "Maritime Safety Information"
  - name: UKHOAssemblyCopyright
    value: "Copyright ï¿½ UK Hydrographic Office"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.1.8"
  - name: DeploymentPool
    value: "UKHO Ubuntu 1804"
  - name: coverityPool
    value: NautilusBuild
  - group: Covscan-vars
  - name: WindowsPool
    value: "NautilusBuild"

resources:
  repositories:
  - repository: covscan
    type: github
    name: UKHO/coverityscan-buildtemplates
    endpoint: "Maritime Safety Information"
    ref: refs/heads/master

stages:
  - stage: CoverityScan
    displayName: "Coverity Scan"
    pool:
      name: $(coverityPool)
    jobs:
    - job: Coverity
      workspace:
        clean: all
      steps:
        - checkout: self
          submodules: recursive
        - task: UseDotNet@2
          displayName: 'Use .NET 6.0.x sdk'
          inputs:
            packageType: sdk
            version: 6.0.x
            installationPath: $(Agent.ToolsDirectory)/dotnet
        - checkout: covscan
        - template: dotnet-cov.yml@covScan
          parameters:
            CovHostUrl: "$(CovHostUrl)"
            CovUser: "$(CovUser)"
            CovPwd: "$(CovPwd)"
            StreamName: "maritime-safety-information"
            BuildCommand: "$(Build.Repository.LocalPath)/maritime-safety-information/UKHO.MaritimeSafetyInformation.Web/UKHO.MaritimeSafetyInformation.Web/UKHO.MaritimeSafetyInformation.Web.csproj"
            StripPath: $(Build.Repository.LocalPath)/maritime-safety-information
            CoverityScanPath: $(Build.Repository.LocalPath)/coverityscan-buildtemplates

  - stage: PERFORM_DEPENDENCYCHECK_DOTNETBUILD_DOTNETTEST_AND_PUBLISH
    displayName: "Build (inc DependencyChecker, Dotnet Build , dotnet test and publish artifact )"
    dependsOn: []
    jobs:
      - job: Dependencychecker
        workspace:
          clean: all
        displayName: "Dependencychecker"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj
                !**/*Tests.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web'
              packagesDirectory: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web\packages'

          - task: CmdLine@1
            displayName: "Run OWASP Dependency Checker"
            inputs:
              filename: 'dependency-check.bat'
              arguments: '--project "Maritime-Safety-Information - $(Build.SourceBranchName)" --scan "$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web" --out "$(Build.ArtifactStagingDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml --noupdate'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: OWASP Dependency Checker Report"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\DCReport'
              ArtifactName: "OWASP Dependency Checker Report"

          - task: PowerShell@1
            displayName: "Fail Build if Dependency Check Finds Any Vulnerabilities"
            inputs:
              scriptType: inlineScript
              arguments: '-ReportLocation $(Build.ArtifactStagingDirectory)\DCReport\*'
              inlineScript: |
                param($ReportLocation)
                Invoke-VulnerabilityCheck -ReportLocation $ReportLocation

      - job: UnitTestsAndCodeCoverage
        workspace:
          clean: all
        displayName: "Dotnet Test and Publish Code Coverage"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore test projects only"
            inputs:
              command: "restore"
              projects: "**/*Tests.csproj"
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web'
              packagesDirectory: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web\packagesForTests'

          - task: DotNetCoreCLI@2
            displayName: "dotnet test - Perform Unit Tests"
            inputs:
              command: "test"
              projects: "**/*UnitTests.csproj"
              arguments: '--configuration $(BuildConfiguration) --settings "$(Build.SourcesDirectory)\test.runsettings" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=[UKHO.MaritimeSafetyInformation.Web.Views]*'
              publishTestResults: true
              testRunTitle: "UnitTests"

          - task: PowerShell@2
            displayName: "Generate code coverage report"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\CodeCoverageReport.ps1'
              arguments: '-source "$(Build.SourcesDirectory)" -reportFolder "$(Build.ArtifactStagingDirectory)"'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Code coverage"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/codecoveragereport"
              ArtifactName: codecoveragereport

      - job: BuildAndPublishAPI
        workspace:
          clean: all
        displayName: "Dotnet Build publish API"
        steps:
          - task: PowerShell@2
            displayName: "Set assembly version numbers based on build ID"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
              arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$env:UKHOAssemblyProduct"'

          - task: UseDotNet@2
            displayName: 'Use .NET 6.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore"
            inputs:
              command: restore
              projects: |
                **/*.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web'              

          - task: DotNetCoreCLI@2
            displayName: "dotnet build task"
            inputs:
              command: "build"
              projects: "**/*.csproj"
              arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: "Publish WebApp"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '**/*UKHO.MaritimeSafetyInformation.Web.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\MaritimeSafetyInformationWeb'
              zipAfterPublish: true
              modifyOutputPath: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Web Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\MaritimeSafetyInformationWeb'
              ArtifactName: MaritimeSafetyInformation

      - job: PublishTerraformArtifacts
        workspace:
          clean: all
        displayName: "Publish Terraform Artifacts"
        steps:

          - task: CopyFiles@2
            displayName: Copy MaritimeSafetyInformationService Config
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web\UKHO.MaritimeSafetyInformation.Web\'
              Contents: 'appsettings.json'
              TargetFolder: '$(Build.SourcesDirectory)\Deployment\src'

          - task: PublishBuildArtifacts@1
            displayName: "Publish terraform Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\Deployment'
              ArtifactName: terraformartifact

      - job: BuildAndPublishDacPac
        workspace:
          clean: all
        displayName: "Build And publish DacPac"
        steps:
          - task: VSBuild@1
            displayName: "Build solution for Maritime Safety Information Database"
            inputs:
              solution: "**/UKHO.MaritimeSafetyInformation.Web.Database.sqlproj"
              configuration: $(BuildConfiguration)
              platform: $(BuildPlatform)

          - task: PublishBuildArtifacts@1
            displayName: "Publish Database Dackpac Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\UKHO.MaritimeSafetyInformation.Web\UKHO.MaritimeSafetyInformation.Web.Database\bin\output'
              ArtifactName: Dackpack

  - stage: Devdeploy
    displayName: "Devdeploy (inc terraform, webapp deploy)"
    variables:
      - group: "Maritime-Safety-Information-Dev-TF-Variables"
      - group: "Maritime-Safety-Information-Dev-Variables"
    jobs:
      - deployment: DevDeployTerraform
        displayName: "Dev - Deploy Terraform and Dotnet App"
        environment: "Maritime-Safety-Information-Dev"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "Maritime Safety Information Dev - A.008.02"

      - deployment: DevDeployApp
        dependsOn: DevDeployTerraform
        displayName: "Dev - Dacpack and App Deployment"
        pool: NautilusBuild
        environment: "Maritime-Safety-Information-Dev"
        workspace:
          clean: all
        variables:
          - group: "Maritime-Safety-Information-Dev-TF-Variables"
          - group: "Maritime-Safety-Information-Dev-Variables"
          - name: WEB_APP_NAME
            value: $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.WEB_APP_NAME']  ]
          - name: MsiWebUrl
            value: $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.MsiWebUrl']  ]
          - name: WebsiteURL
            value: $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.WebsiteURL']  ]
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: "Download Dackpack Artifact"
                  inputs:
                    source: "current"
                    artifact: "Dackpack"
                    path: $(Build.SourcesDirectory)/Dackpack

                - task: SqlAzureDacpacDeployment@1
                  inputs:
                    azureSubscription: SharedServicesPre
                    AuthenticationType: "server"
                    ServerName: $(RNW_DB_Server)
                    DatabaseName: $(RNW_DB_Name)
                    SqlUsername: $(RNW_DB_Deploy_SQLUser)
                    SqlPassword: $(RNW_DB_Deploy_SQLPass)
                    deployType: "DacpacTask"
                    DeploymentAction: "Publish"
                    IpDetectionMethod: "AutoDetect"
                    DacpacFile: $(Build.SourcesDirectory)/Dackpack/UKHO.MaritimeSafetyInformation.Web.Database.dacpac

                - task: DownloadPipelineArtifact@2
                  displayName: "Download App service Artifact"
                  inputs:
                    source: "current"
                    artifact: "MaritimeSafetyInformation"
                    path: $(Build.SourcesDirectory)/MaritimeSafetyInformation

                - task: FileTransform@1
                  displayName: "File Transform: WebAppSettings"
                  inputs:
                    folderPath: '$(Pipeline.Workspace)/MaritimeSafetyInformation/*.zip'
                    fileType: 'json'
                    targetFiles: '**/appsettings.json'

                - task: AzureWebApp@1
                  displayName: "Azure App Deploy: msi-$(Environment)-webapp"
                  inputs:
                    azureSubscription: "Maritime Safety Information Dev - A.008.02"
                    appType: webApp
                    appName: "$(WEB_APP_NAME)"
                    package: "$(Pipeline.Workspace)/MaritimeSafetyInformation/UKHO.MaritimeSafetyInformation.Web.zip"

                - task: PowerShell@2
                  displayName: "Check the status of Service"
                  inputs:
                    targetType: filePath
                    filePath: "$(Pipeline.Workspace)/terraformartifact/check_service_status.ps1"
                    arguments: "-healthEndPointUrl $(MsiWebUrl)/health -waitTimeInMinute $(waitTimeInMinute)"


                - bash: echo "##vso[task.setvariable variable=WebsiteURL;isOutput=true]$(WebsiteURL)"
                  name: SetOutputUrl


      - job: FunctionalAndAccessibilityTests
        dependsOn: DevDeployApp
        pool: $(WindowsPool)
        displayName: "Dev Functional Automated And Accessibility Tests"
        variables: 
         url: $[ dependencies.DevDeployApp.outputs['DevDeployApp.SetOutputUrl.WebsiteURL']  ]
         PLAYWRIGHT_JUNIT_OUTPUT_NAME: results.xml
        workspace:
         clean: all
        steps:
          - template: Deployment/templates/continuous-testing.yml

  - stage: QADeploy
    displayName: "QAdeploy (inc terraform, webapp deploy)"
    variables:
      - group: "Maritime-Safety-Information-QA-TF-Variables"
      - group: "Maritime-Safety-Information-QA-Variables"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:

      - deployment: QADeployTerraform
        displayName: "QA - Deploy Terraform and Dotnet App"
        environment: "Maritime-Safety-Information-QA"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "Maritime Safety Information QA - A.008.02"

      - deployment: QADeployApp
        dependsOn: QADeployTerraform
        displayName: "QA - Dacpack and App Deployment"
        pool: NautilusBuild
        environment: "Maritime-Safety-Information-QA"
        workspace:
          clean: all
        variables:
          - group: "Maritime-Safety-Information-QA-TF-Variables"
          - group: "Maritime-Safety-Information-QA-Variables"
          - name: WEB_APP_NAME
            value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.WEB_APP_NAME']  ]
          - name: MsiWebUrl
            value: $[ dependencies.QADeployTerraform.outputs['QADeployTerraform.TerraformDeploy.MsiWebUrl']  ]
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: "Download Dackpack Artifact"
                  inputs:
                    source: "current"
                    artifact: "Dackpack"
                    path: $(Build.SourcesDirectory)/Dackpack

                - task: SqlAzureDacpacDeployment@1
                  inputs:
                    azureSubscription: SharedServicesPre
                    AuthenticationType: "server"
                    ServerName: $(RNW_DB_Server)
                    DatabaseName: $(RNW_DB_Name)
                    SqlUsername: $(RNW_DB_Deploy_SQLUser)
                    SqlPassword: $(RNW_DB_Deploy_SQLPass)
                    deployType: "DacpacTask"
                    DeploymentAction: "Publish"
                    IpDetectionMethod: "AutoDetect"
                    DacpacFile: $(Build.SourcesDirectory)/Dackpack/UKHO.MaritimeSafetyInformation.Web.Database.dacpac

                - task: DownloadPipelineArtifact@2
                  displayName: "Download App service Artifact"
                  inputs:
                    source: "current"
                    artifact: "MaritimeSafetyInformation"
                    path: $(Build.SourcesDirectory)/MaritimeSafetyInformation

                - task: FileTransform@1
                  displayName: "File Transform: WebAppSettings"
                  inputs:
                    folderPath: '$(Pipeline.Workspace)/MaritimeSafetyInformation/*.zip'
                    fileType: 'json'
                    targetFiles: '**/appsettings.json'

                - task: AzureWebApp@1
                  displayName: "Azure App Deploy: msi-$(Environment)-webapp"
                  inputs:
                    azureSubscription: "Maritime Safety Information QA - A.008.02"
                    appType: webApp
                    appName: "$(WEB_APP_NAME)"
                    package: "$(Pipeline.Workspace)/MaritimeSafetyInformation/UKHO.MaritimeSafetyInformation.Web.zip"

                - task: PowerShell@2
                  displayName: "Check the status of Service"
                  inputs:
                    targetType: filePath
                    filePath: "$(Pipeline.Workspace)/terraformartifact/check_service_status.ps1"
                    arguments: "-healthEndPointUrl $(MsiWebUrl)/health -waitTimeInMinute $(waitTimeInMinute)"

      - job: FunctionalAndAccessibilityTests
        dependsOn: 
        - QADeployApp
        pool: $(WindowsPool)
        displayName: "QA Functional Automated And Accessibility Tests"
        variables: 
         url: $[ dependencies.QADeployApp.outputs['QADeployApp.TerraformDeploy.WebsiteURL']  ]
         PLAYWRIGHT_JUNIT_OUTPUT_NAME: results.xml
        workspace:
         clean: all
        steps:
          - template: Deployment/templates/continuous-testing.yml

  - stage: Livedeploy
    displayName: "Livedeploy (inc terraform, webapp deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: LiveDeployApp
        displayName: "Live - deploy terraform and dotnet App"
        environment: "Maritime-Safety-Information-Live"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "Maritime-Safety-Information-Live-TF-Variables"
          - group: "Maritime-Safety-Information-Live-Variables"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "Maritime Safety Information Dev - A.008.02"
