parameters:
  - name: AzureSubscription
    type: string

steps:
    - task: DownloadBuildArtifacts@0
      displayName: "Download Integration test Artifact"
      inputs:
       buildType: 'current'
       downloadType: 'single'
       artifactName: 'IntegrationTests'
       downloadPath: '$(Build.SourcesDirectory)'

    - task: FileTransform@2
      displayName: "File Transform: integrationtests"
      inputs:
       folderPath: '$(Build.SourcesDirectory)/IntegrationTests/'
       xmlTransformationRules:
       jsonTargetFiles: '**/appsettings.json'

    - task: UseDotNet@2
      displayName: 'Use .NET 6.0.x sdk'
      inputs:
       packageType: sdk
       version: 6.0.x

    - task: DotNetCoreCLI@2
      displayName: "Run Integration tests"
      inputs:
       command: "test"
       projects: |
          **/*IntegrationTest*.dll
          !**/*TestAdapter.dll
          !**/obj/**
       testRunTitle: "$(Environment)-IntegrationTests"
       workingDirectory: '$(Build.SourcesDirectory)/IntegrationTests'

    - checkout: self
      condition: always()
      

    - task: NodeTool@0
      inputs:
       versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
       npm ci
      displayName: 'npm restore'
      workingDirectory: '$(Build.SourcesDirectory)/Tests'

    - task: FileTransform@2
      inputs:
       folderPath: '$(Build.SourcesDirectory)\Tests\Configuration'
       xmlTransformationRules:
       jsonTargetFiles: 'appConfig.json'

    - script: |
       npm run test:auto
      displayName: 'Run Functional Tests'
      workingDirectory: '$(Build.SourcesDirectory)/Tests/AutoTests/FunctionalTest'

    - task: ArchiveFiles@2
      condition: succeededOrFailed()
      displayName: 'Zip FT screenshots and video'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/test-results/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/FTmedia.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish FT error media'
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/FTmedia.zip'
        ArtifactName: 'FT output'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: 'JUnit'
        testResultsFiles: 'results.xml'
        mergeTestResults: true
        searchFolder:  '$(System.DefaultWorkingDirectory)\Tests'
        testRunTitle: $(Environment) Functional Test Results
      displayName: 'Publish Functional Test Results'

    - script: |
       npm run test:a11y
      displayName: 'Run Accessibility Tests'
      workingDirectory: '$(Build.SourcesDirectory)/Tests/AutoTests/AccessibilityTest'

    - task: ArchiveFiles@2
      condition: succeededOrFailed()
      displayName: 'Zip AT screenshots and video'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/test-results/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/ATmedia.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish AT error media'
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/ATmedia.zip'
        ArtifactName: 'AT output'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: 'JUnit'
        testResultsFiles: 'results.xml'
        mergeTestResults: true
        searchFolder:  '$(System.DefaultWorkingDirectory)\Tests'
        testRunTitle: $(Environment) Accessibility Test Results
      displayName: 'Publish Accessibility Test Results'

    - task: AzureCLI@2
      displayName: "Swap MSI BusinessUnit"
      condition: always()
      inputs:
        azureSubscription: "${{ parameters.AzureSubscription }}"
        scriptType: 'pscore'
        scriptLocation: 'scriptPath'
        scriptPath: "$(System.DefaultWorkingDirectory)/Deployment/set_business_unit.ps1"
        arguments: '-businessUnit $(FileShareService.BusinessUnitMsi) -isCacheEnabled $(IsFssCacheEnabledAfterFT) -resourceGroup $(webapp_rg) -webappName $(WEB_APP_NAME)'

    
